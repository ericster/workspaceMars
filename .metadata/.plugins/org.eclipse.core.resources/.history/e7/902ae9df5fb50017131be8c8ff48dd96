import java.util.LinkedList;
import java.util.Queue;

public class Solution {

	public static void main(String[] args) {
		WordDictionary wd = new WordDictionary();
		wd.addWord("bad");
		wd.addWord("dad");

	}
	
	/*
	 * 
	 	addWord("bad")
		addWord("dad")
		addWord("mad")
		search("pad") -> false
		search("bad") -> true
		search(".ad") -> true
		search("b..") -> true

	 */
	public static int N = 26;

	public static class WordDictionary {

	    /** Initialize your data structure here. */
		static public Trie top;
	    public WordDictionary() {
	    	top = new Trie();
	        
	    }
	    
	    public void printWordDictionary() {
	    	Queue<Trie> queue = new LinkedList<Trie>();
	    	Trie tmp;
	    	queue.offer(top);
	    	tmp = queue.poll();
	    	while (tmp!=null){
	    		for(int i=0;i<N;i++){
	    			if(tmp.childen[i]!=null){
	    				queue.offer(tmp.childen[i]);
	    				System.out.println((char)(i + 'a'));
	    			}
	    		}
	    		
	    	}
	    	
	    }
	    
	    /** Adds a word into the data structure. */
	    public void addWord(String word) {
	    	Trie tmp = top;
	    	int n = word.length();
	    	for (int i=0;i<n;i++){
	    		int idx = word.charAt(i) - 'a';
	    		if (!tmp.childen[idx].isAssigned)
					tmp.childen[idx].isAssigned = true;
	    		tmp = tmp.childen[idx];
	    	}
	    	tmp.childen[n].isWord = true;;
	    }
	    
	    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
	    public boolean search(String word) {
	    	
	    	return false;
	    }
	}
	
	public static class Trie {
		boolean isAssigned;
		boolean isWord;
		Trie[] childen = new Trie[N];
	}

	/**
	 * Your WordDictionary object will be instantiated and called as such:
	 * WordDictionary obj = new WordDictionary();
	 * obj.addWord(word);
	 * boolean param_2 = obj.search(word);
	 */

}
